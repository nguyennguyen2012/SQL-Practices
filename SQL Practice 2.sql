-- JOIN concept

/*Exercise 1: From dbo.FactInternetSales and dbo.DimSalesTerritory, Write a query displaying the sales orders where the sales amount exceeds $1,000. 
Retrieve only those rows have the territory region is Canada. */
-- Your code here   

SELECT SalesOrderNumber, 
ProductKey, 
SalesAmount, 
SalesTerritoryRegion, 
SalesTerritoryCountry
FROM FactInternetSales as FIS
JOIN DimSalesTerritory as DST 
on FIS.SalesTerritoryKey = DST.SalesTerritoryKey
WHERE SalesAmount > 1000 
AND SalesTerritoryRegion = 'Canada'

/*Exercise 2: 
From dbo.DimProduct and dbo.DimProductSubcategory,  
Write a query displaying the Product key,   EnglishProductName, and Color columns which has EnglishProductSubCategoryName is 'Mountain Bikes'. 
And  interger part of ListPrice = 3399 */ 
-- Your code here   

SELECT ProductKey, 
EnglishProductName, 
Color
FROM DimProduct as DP 
JOIN DimProductSubcategory as DPSC 
ON DP.ProductSubcategoryKey = DPSC.ProductSubcategoryKey
WHERE EnglishProductSubcategoryName = 'Mountain Bikes'
AND ListPrice >= 3399 
AND ListPrice < 3400

/*Exercise 3: From dbo.DimPromotion, dbo.FactInternetSales
Write a query display ProductKey, SalesOrderNumber, SalesAmount from rows which has discount percentage >= 20% */
-- Your code here   

SELECT Sales.ProductKey, 
SalesOrderNumber, 
SalesAmount
FROM dbo.FactInternetSales as Sales 
JOIN dbo.DimPromotion as DPromo 
ON Sales.PromotionKey = DPromo.PromotionKey
WHERE DiscountPct >= 0.2


/*Exercise 4: From dbo.DimCustomer, dbo.DimGeography, 
Display Phone number of customer who has yearly income > 150000 and come from United States */
-- Your code here   

SELECT Phone
FROM dbo.DimCustomer as DC
JOIN dbo.DimGeography as DG 
ON DC.Geographykey = DG.GeographyKey
WHERE YearlyIncome > 150000
AND EnglishCountryRegionName = 'United States'

-- Logical expression  

/* Exercise 5: From dbo.DimProduct,   
Get ProductKey, EnglishProductName and 2 new columns:     
a. ProductFlag is generated by the string preceded by the '-' character in EnglishProductName.   
(If EnglishProductName do not have '-' then keep EnglishProductName value.)
b. GroupSize follows by conditions:     
- Size is 'S' or less than 43 --> 'small'    
- Size is 'M' or 'L' or from 43 to 57 --> 'medium'    
- Size is 'XL' or larger than 57 --> 'big'    
- NULL --> 'no size' */  

-- Your code here   

SELECT EnglishProductName, 
-- Ý a
-- Cách 1: Sử dụng hàm IIF
IIF(CHARINDEX('-', EnglishProductName) = 0, 
  EnglishProductName, 
  RTRIM(LEFT (EnglishProductName, CHARINDEX('-',EnglishProductName) - 1 ))) AS ProductName, 

-- Cách 2: Sử dụng CASE WHEN 
CASE 
WHEN CHARINDEX('-', EnglishProductName) = 0 THEN EnglishProductName
ELSE RTRIM(LEFT (EnglishProductName, CHARINDEX('-',EnglishProductName) - 1 ))
END AS ProductName, 

-- Cách 3: Sử dụng hàm ISNULL (tham khảo thêm)
ISNULL(RTRIM(STUFF(EnglishProductName,CHARINDEX('-',EnglishProductName,1),LEN(EnglishProductName),'')),EnglishProductName), 


-- Ý b

-- Cách 1, sử dụng CASE WHEN và hàm TRY_CAST
CASE 
WHEN Size = 'S' OR TRY_CAST(Size as int) < 43 THEN 'Small'
WHEN Size IN ('M', 'L') OR TRY_CAST(Size as int) BETWEEN 43 AND 57 THEN 'Medium'
WHEN Size = 'XL' OR TRY_CAST(Size as int) > 57 THEN 'Big'
ELSE 'No size' END AS Size_group, 

CASE 
WHEN Size = 'S' OR Size < '43' THEN 'Small'
WHEN Size IN ('M', 'L') OR Size BETWEEN '43' AND '57' THEN 'Medium'
WHEN Size = 'XL' OR Size > '57' THEN 'Big'
ELSE 'No size' END AS Size_group,  

-- Cách 3 sử dụng hàm IIF 
IIF(Size = 'S' OR Size < '43', 'Small', 
  IIF(Size IN ('M', 'L') OR Size BETWEEN '43' AND '57', 'Medium', 
    IIF(Size = 'XL' OR Size > '57', 'Big', 'No size')
  )) as Size_group 

-- Cách 4: catch toàn bộ các case bằng chữ trước rồi mới đặt điều kiện với số

, CASE WHEN Size = 'S' Then 'Small'
WHEN Size IN ('M', 'L') Then 'Medium'
WHEN Size = 'XL' Then 'Big'
WHEN Size < 43 then 'Small'
WHEN Size <= 57 then 'Medium'
WHEN Size > 57 then 'Big'
ELSE 'No size' END


FROM dbo.DimProduct


-- UNION concept

/* Exercise 6: From dbo. DimCustomer, dbo.ProspectiveBuyer
Display list Customer/Buyer FullName (combine FirstName, MiddleName, LastName), Gender, EmailAddress then caculate Age of Customer/Buyer now (using BirthDate). 
-- Your code here  */ 

SELECT CONCAT_WS(' ', FirstName, MiddleName, LastName) as FullName, 
Gender, 
EmailAddress, 
DATEDIFF(YEAR, BirthDate, GETDATE()) as Age_now
FROM dbo.DimCustomer
UNION 
SELECT CONCAT_WS(' ', FirstName, MiddleName, LastName) as FullName, 
Gender, 
EmailAddress, 
DATEDIFF(YEAR, BirthDate, GETDATE())
FROM dbo.ProspectiveBuyer


/*Exercise 7 (hard) : From FactInternetSales and FactResellerSale, DimProduct 
Find all SalesOrderNumber  which EnglishProductName contains 'Road' in name and Color is Yellow (2 ways)*/ 

---WAY 01---
SELECT SalesOrderNumber
FROM dbo.FactInternetSales FIS
JOIN dbo.DimProduct DP 
ON FIS.ProductKey = DP.ProductKey
WHERE EnglishProductName LIKE '%Road%'
AND Color = 'Yellow'

UNION 

SELECT SalesOrderNumber
FROM dbo.FactResellerSales FRS
JOIN dbo.DimProduct DP 
ON FRS.ProductKey = DP.ProductKey
WHERE EnglishProductName LIKE '%Road%'
AND Color = 'Yellow'

---WAY 02 ---

SELECT DISTINCT SalesOrderNumber
FROM 
(SELECT SalesOrderNumber, ProductKey
FROM dbo.FactInternetSales
UNION ALL
SELECT SalesOrderNumber, ProductKey
FROM dbo.FactResellerSales) as FS 
JOIN dbo.DimProduct as DP 
ON FS.ProductKey = DP.ProductKey 
WHERE EnglishProductName LIKE '%Road%'
AND Color = 'Yellow'
